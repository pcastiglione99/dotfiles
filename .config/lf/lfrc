# interpreter for shell commands
set previewer ~/.config/lf/preview
set cleaner ~/.config/lf/cleaner
set shellopts '-eu'
set ifs "\n"
set icons
#set hidden true
map m clear
map t clear
map <esc> clear
map <enter> open
map <f-5> reload


# dedicated keys for file opener actions
map o $mimeopen $f
map O $mimeopen --ask $f

#navigation
map gm cd /run/media/pcastiglione99/DATA
map gu cd ~/onedrivePoliMi/Universita/Magistrale/Year2/Semester2
map gt cd ~/.local/share/Trash/files
map gh cd 
map gp cd ~/Pictures
map gd cd ~/Downloads
map <c-t> terminal
cmd mkdir %mkdir "$@"
cmd terminal $nohup alacritty > /dev/null &

cmd pdfflat ${{
    set -f
    for file in $fx
    do
        convert -density 180 $file "${file%.*}"_flat.pdf
    done
}}

cmd open ${{
    test -L $f && f=$(readlink -f $f)
    case $(file --mime-type $f -b) in
        image/*) nohup feh --image-bg black --scale-down --auto-zoom --start-at $f ./ -d > /dev/null &;;
        text/html) firefox $fx;;
        text/*) nvim $fx;;
        video/*) nohup mpv $fx >> /dev/null &;;
        application/pdf) nohup zathura $fx > /dev/null &;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

cmd clipboard ${{
	cat $f | xclip -selection c
}}

cmd trash ${{
    set -f
    printf "$fx\n"
    printf "move to trash?[y/n]"
    read ans
    [[ $ans = "y" || $ans = "" ]] && gio trash $fx
}}

cmd delete ${{
     set -f
     printf "$fx\n"
     printf "delete?[y/n]"
     read ans
     [[ $ans = "y" || $ans = "" ]] && rm -rf $fx
 }}

map <delete> trash
map D trash
cmd empty_trash ${{
	gio trash --empty
}}
cmd unarchive ${{
    set -f
	for file in $fx
	do
		directory="${file%.*}"
		mkdir $directory
    	case $file in
    	    *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $file;;
    	    *.tar.gz|*.tgz) tar xzvf $file;;
    	    *.tar.xz|*.txz) tar xJvf $file;;
    	    *.zip) unzip $file -d $directory;;
    	    *.rar) unrar x $file;;
    	    *.7z) 7z x $file;;
    	esac
	done
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
	name=${1-$(date +"%d-%m-%Y:%H:%M:%S")}
    mkdir $name
    cp -r $fx $name
    zip -r $name.zip $name
    rm -rf $name
}}

cmd setwallpaper $cp "$f" ~/Pictures/Wallpapers/wallpaper.png

map au unarchive

cmd remux ${{ 
	set -f
	for file in $fx
	do
		ffmpeg -i $file -c:v copy -c:a copy "${file%.*}"_mux.mp4
	done
}}


cmd md2pdf ${{
	set -f
	for file in $fx
	do
		pandoc --template=GitHub.html5 --embed-resources --standalone $file -o $file.html
		wkhtmltopdf --javascript-delay 3000 $file.html "${file%.*}".pdf
		rm $file.html
	done
}}

cmd notebook2pdf ${{
	set -f
	for file in $fx
	do
		jupyter nbconvert --to html $file --output $file
		wkhtmltopdf --javascript-delay 3000 --enable-local-file-access $file.html "${file%.*}".pdf
		rm $file.html
	done
}}

cmd html2pdf ${{
	set -f
	for file in $fx
	do
		wkhtmltopdf --javascript-delay 3000 --enable-local-file-access $file.html "${file%.*}".pdf
	done
}}

cmd server $python -m http.server

#cmd mount 	$sudo mount /dev/sda1 /mnt/Data
#cmd unmount $sudo umount /dev/sda1
cmd mount 	$udisksctl mount   -b /dev/sda1
cmd unmount $udisksctl unmount -b /dev/sda1


